import tensorflow as tf

class RTN(object):
    """the residual tensor network.

    Args:
        input_tensor: 3D input tensor,shape[batch_size,length,input_dim].
        bond_dim: the virtual bond dimension in the MPS
        num_classes: Number of object categories.Used as the output dimmension.
        map_dim:Add the map between x and [x,x^2,x^3...x^n], where n is the map_dim.
            For example, if the input tensor's last dimension is [x,y] and the map_dim is 2,
            the input tensor's last dimension will be mapped into [x,x^2,y,y^2].
    Returns:
        A 2D tensor,shape[batch_size,num_classes].
    """

    def __init__(self,bond_dim,num_classes,map_dim=1):
        self.bond_dim=bond_dim
        self.num_classes=num_classes
        self.map_dim=map_dim

    def map(self,input_tensor):
        self.length=input_tensor.shape[1].value
        self.input_dim=input_tensor.shape[2].value
        self.feature_dim=self.map_dim*self.input_dim
        for i in range(self.map_dim - 1):
            input_tensor = tf.concat([input_tensor,
                                      input_tensor[:, :, :self.input_dim] * input_tensor[:, :, self.input_dim * i:]], axis=2)
        return input_tensor

    def weight_variable(self,shape):
        initial = tf.truncated_normal(shape, stddev=0.01)
        return tf.Variable(initial)

    def call(self, inputs,*args ,**kwargs):
        """The logic of the layer lives here.

        Arguments:
          inputs: input tensor(s).
          **kwargs: additional keyword arguments.

        Returns:
          Output tensor(s).
        """
        return inputs

    def build(self,*args ,**kwargs):
        """Creates the variables of the layer."""
        pass

    def __call__(self,input_tensor ,*args, **kwargs):
        map_tensor =self.map(input_tensor)
        self.build()
        out_put=self.call(map_tensor,*args, **kwargs)
        return out_put

class mps(RTN):
    """Add the MPS layers.
    """
    def build(self,*args ,**kwargs):
        #the varible in the MPS

        self.W_head = self.weight_variable([self.feature_dim, self.bond_dim])
        self.W_middle = self.weight_variable([self.length - 2, self.bond_dim, self.feature_dim,self.bond_dim])
        self.W_end = self.weight_variable([self.bond_dim, self.feature_dim, self.num_classes])
        self.Middle_out = self.weight_variable([self.bond_dim, self.num_classes])

    def call(self,map_tensor, *args, **kwargs):
        #the left to right contraction of MPS

        out = tf.einsum('nj,jh->nh', map_tensor[:,0], self.W_head) + 1
        for l in range(self.length - 2):
            out = tf.einsum('nh,nj,hjk->nk', out, map_tensor[:,l + 1], self.W_middle[l]) + out
        result = tf.einsum('nh,nj,hjk->nk', out, map_tensor[:,self.length - 1], self.W_end) + tf.matmul(out, self.Middle_out)

        return result
